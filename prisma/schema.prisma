generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  tag           String          @unique
  key           String          @unique
  email         String          @unique
  name          String
  picture       String?
  TUCMC         Boolean?        @default(false)
  sessions      Session[]
  organizations Organizations[]
  clubs         Clubs[]
  programs      Programs[]
  gifted        Gifted[]
}

model Organizations {
  id             String    @id @default(cuid()) @map("_id")
  isAdmin        Boolean   @default(false)
  key            String    @unique
  tag            String    @default("organizations")
  error          String
  email          String    @unique
  name           String?   @unique
  thainame       String    @unique
  status         String    @default("pending")
  members        String    @default("0")
  ig             String?
  fb             String?
  others         String?
  activities     String?
  position       String?
  working        String?
  captureimg1    String?
  descimg1       String?
  captureimg2    String?
  descimg2       String?
  captureimg3    String?
  descimg3       String?
  reviews        Reviews[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   User?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
}

model Clubs {
  id          String    @id @default(cuid()) @map("_id")
  isAdmin     Boolean   @default(false)
  key         String    @unique
  tag         String    @default("clubs")
  error       String
  clubKey     String    @unique
  email       String    @unique
  name        String?   @unique
  thainame    String    @unique
  status      String    @default("pending")
  members     String    @default("0")
  ig          String?
  fb          String?
  others      String?
  activities  String?
  benefits    String?
  working     String?
  captureimg1 String?
  descimg1    String?
  captureimg2 String?
  descimg2    String?
  captureimg3 String?
  descimg3    String?
  logo        String?
  reviews     Reviews[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  club        User?     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      String?
}

model Programs {
  id          String    @id @default(cuid()) @map("_id")
  isAdmin     Boolean   @default(false)
  key         String    @unique
  tag         String    @default("programs")
  error       String
  email       String    @unique
  name        String?   @unique
  thainame    String    @unique
  status      String    @default("pending")
  members     String    @default("0")
  ig          String?
  fb          String?
  others      String?
  admissions  String?
  courses    String?
  interests    String?
  captureimg1 String?
  descimg1    String?
  captureimg2 String?
  descimg2    String?
  captureimg3 String?
  descimg3    String?
  reviews     Reviews[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  program     User?     @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String?
}

model Gifted {
  id          String    @id @default(cuid()) @map("_id")
  isAdmin     Boolean   @default(false)
  key         String    @unique
  tag         String    @default("gifted")
  error       String
  email       String    @unique
  name        String?   @unique
  thainame    String    @unique
  status      String    @default("pending")
  members     String    @default("0")
  ig          String?
  fb          String?
  others      String?
  admissions  String?
  courses     String?
  interests   String?
  captureimg1 String?
  descimg1    String?
  captureimg2 String?
  descimg2    String?
  captureimg3 String?
  descimg3    String?
  reviews     Reviews[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  gifted      User?     @relation(fields: [giftedId], references: [id], onDelete: Cascade)
  giftedId    String?   
}

model Reviews {
  id             String         @id @default(cuid()) @map("_id")
  key            String
  email          String         @unique
  count          String?
  profile        String?
  name           String
  nick           String
  gen            String
  contact        String
  content        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewsOrg     Organizations? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewsClub    Clubs?         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewsProgram Programs?      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewsGifted  Gifted?        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId       String?
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
